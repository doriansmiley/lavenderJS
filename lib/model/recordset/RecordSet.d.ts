/**
 * Created by dsmiley on 5/12/17.
 */
import { Subject } from '../observable/Subject';
import { CollectionEvent } from '../../events/CollectionEvent';
import { IEvent } from '../../events/IEvent';
import { IList } from '../list/IList';
import { IEventDispatcher } from '../../control/IEventDispatcher';
export declare class RecordSet extends Subject implements IEventDispatcher {
    static USER_UPLOAD: string;
    static FOTOLIA: string;
    static FACEBOOK: string;
    private _id;
    private _totalRecords;
    private _totalPages;
    private _selectedPage;
    private _recordsPerPage;
    private _results;
    private _pageList;
    private _createdOn;
    private _timeToLive;
    private _source;
    private _routeController;
    private _intervalId;
    resultsByPage: Object;
    handlersByEventName: Object;
    addEventListener: (event: string, instance: Object, handler: string) => void;
    canListen: (eventType: string, instance: Object, handler: string) => boolean;
    removeEventListener: (event: string, instance: Object, handler: string) => void;
    removeAllEventListeners: (instance: Object) => void;
    dispatch: (event: IEvent) => void;
    get id(): string;
    set id(val: string);
    get totalRecords(): number;
    set totalRecords(val: number);
    get totalPages(): number;
    set totalPages(val: number);
    get selectedPage(): number;
    set selectedPage(val: number);
    get recordsPerPage(): number;
    set recordsPerPage(val: number);
    get results(): IList;
    set results(val: IList);
    get createdOn(): number;
    set createdOn(val: number);
    get pageList(): IList;
    set pageList(val: IList);
    get timeToLive(): number;
    set timeToLive(val: number);
    get source(): string;
    set source(val: string);
    get routeController(): Object;
    set routeController(val: Object);
    constructor(timeToLive?: number, listFunction?: any);
    private clearInterval;
    private clear;
    private pageLoaded;
    private calculatePageList;
    private renewState;
    resultCollectionChanged(event: CollectionEvent): void;
    destroy(): void;
}
